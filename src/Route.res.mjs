// Generated by ReScript, PLEASE EDIT WITH CARE

import * as PathToRegexp from "path-to-regexp";

function validatePrefix(prefix) {
  var prefix$1 = "/".startsWith(prefix) ? prefix : "/" + prefix;
  if ("/".endsWith(prefix$1)) {
    return prefix$1;
  } else {
    return prefix$1 + "/";
  }
}

function validateSuffix(suffix) {
  var suffix$1 = "/".startsWith(suffix) ? suffix : "/" + suffix;
  if ("/".endsWith(suffix$1)) {
    return suffix$1.slice(0, -1);
  } else {
    return suffix$1;
  }
}

function validateParameter(parameter) {
  if (parameter.startsWith(":")) {
    return parameter;
  } else {
    return ":" + parameter;
  }
}

function validateNParameter(suffix) {
  if ("/:".startsWith(suffix)) {
    return suffix;
  } else {
    return "/:" + suffix;
  }
}

function route(route$1) {
  var r = PathToRegexp.pathToRegexp(route$1);
  return function (str) {
    var match = r.exec(str);
    if (match === null || match === undefined) {
      return ;
    } else {
      return true;
    }
  };
}

function route1(p1, prefixOpt, suffixOpt) {
  var prefix = prefixOpt !== undefined ? prefixOpt : "";
  var suffix = suffixOpt !== undefined ? suffixOpt : "";
  var r = PathToRegexp.pathToRegexp(validatePrefix(prefix) + validateParameter(p1) + validateSuffix(suffix));
  return function (str) {
    var t = r.exec(str);
    if (t === null || t === undefined) {
      return ;
    } else {
      return t[1];
    }
  };
}

function route2(p1, p2, prefix1Opt, suffix1Opt, prefix2Opt, suffix2Opt) {
  var prefix1 = prefix1Opt !== undefined ? prefix1Opt : "";
  var suffix1 = suffix1Opt !== undefined ? suffix1Opt : "";
  var prefix2 = prefix2Opt !== undefined ? prefix2Opt : "";
  var suffix2 = suffix2Opt !== undefined ? suffix2Opt : "";
  var r = PathToRegexp.pathToRegexp(validatePrefix(prefix1) + validateParameter(p1) + validateSuffix(suffix1) + validatePrefix(prefix2) + validateNParameter(p2) + validateSuffix(suffix2));
  return function (str) {
    var t = r.exec(str);
    if (t === null || t === undefined) {
      return ;
    } else {
      return [
              t[1],
              t[2]
            ];
    }
  };
}

console.log(route1("word", "echo", undefined)("/echo/foo"));

console.log(route2("first", "last", "name", undefined, undefined, undefined)("/name/josh/vlk"));

export {
  validatePrefix ,
  validateSuffix ,
  validateParameter ,
  validateNParameter ,
  route ,
  route1 ,
  route2 ,
}
/*  Not a pure module */
